export class {{ Name }}Hub {
    constructor(private connection: HubConnection) {
    }
{% for operation in Operations -%}

{%     if operation.IsObservable -%}
    {{ operation.MethodName }}({% for parameter in operation.Parameters %}{{ parameter.Name }}: {{ parameter.Type }}{% if forloop.last == false %}, {% endif %}{% endfor %}): IStreamResult<{{ operation.ReturnType.Type }}> {
        return this.connection.stream('{{ operation.Name }}'{% for parameter in operation.Parameters %}, {{ parameter.Name }}{% endfor %});
    }
{%     elsif operation.HasReturnType -%}
    {{ operation.MethodName }}({% for parameter in operation.Parameters %}{{ parameter.Name }}: {{ parameter.Type }}{% if forloop.last == false %}, {% endif %}{% endfor %}): Promise<{{ operation.ReturnType.Type }}> {
        return this.connection.invoke('{{ operation.Name }}'{% for parameter in operation.Parameters %}, {{ parameter.Name }}{% endfor %});
    }
{%     else -%}
    {{ operation.MethodName }}({% for parameter in operation.Parameters %}{{ parameter.Name }}: {{ parameter.Type }}{% if forloop.last == false %}, {% endif %}{% endfor %}): Promise<void> {
        return this.connection.invoke('{{ operation.Name }}'{% for parameter in operation.Parameters %}, {{ parameter.Name }}{% endfor %});
    }
{%     endif -%}
{% endfor -%}

    registerCallbacks(implementation: I{{ Name }}HubCallbacks) {
        let callbacks: { methodName: string, fn: (...args: any[]) => void }[] = [];
{% for operation in Callbacks -%}
        callbacks.push({ methodName: '{{ operation.Name }}', fn: ({% for parameter in operation.Parameters %}{{ parameter.Name }}{% if forloop.last == false %}, {% endif %}{% endfor %}) => implementation.{{operation.MethodName}}({% for parameter in operation.Parameters %}{{ parameter.Name }}{% if forloop.last == false %}, {% endif %}{% endfor %}) });
{% endfor -%}

        for (let i = 0; i < callbacks.length; i++) {
			this.connection.on(callbacks[i].methodName, callbacks[i].fn);
		}

        return () => {
			for (let i = 0; i < callbacks.length; i++) {
				this.connection.off(callbacks[i].methodName, callbacks[i].fn);
			}

			callbacks = [];
		};
    }
}

export interface I{{ Name }}HubCallbacks {
{% for operation in Callbacks -%}
    {{ operation.MethodName }}({% for parameter in operation.Parameters %}{{ parameter.Name }}: {{ parameter.Type }}{% if forloop.last == false %}, {% endif %}{% endfor %}): void;
{% endfor -%}
}